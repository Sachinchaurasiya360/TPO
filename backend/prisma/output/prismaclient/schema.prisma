generator client {
  provider = "prisma-client-js"
  output   = "./output/prismaclient"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserAcademicYear {
  FIRST_YEAR
  SECOND_YEAR
  THIRD_YEAR
  FOURTH_YEAR
}

model User {
  id            Int               @id @default(autoincrement())
  fullName      String
  legalName     String?
  contactNo     String?
  emailId       String            @unique
  password      String
  cgpa          Cgpa?
  studentId     String?
  sscPercentage Float?
  hscPercentage Float?
  department    String?
  academicYear  UserAcademicYear?
  skills        String[]
  profilePic    String?
  resumeUrl     String?
  isVerified    Boolean           @default(false)
  createdAt     DateTime          @default(now())
  socialProfile String?
  achievements  Achievement[]
  alumni        Alumni?
  internships   Internship[]

  @@index([emailId])
  @@index([studentId])
}

model Cgpa {
  id      String @unique @default(uuid())
  UserId  Int    @unique
  student User?  @relation(fields: [UserId], references: [id], onDelete: Cascade)
  sem1    Float?
  sem2    Float?
  sem3    Float?
  sem4    Float?
  sem5    Float?
  sem6    Float?
  sem7    Float?
  sem8    Float?
}

model Internship {
  id              String    @id @default(uuid())
  userId          Int
  title           String?
  companyName     String?
  roleDescription String
  duration        String?
  startDate       DateTime?
  endDate         DateTime?
  certificateUrl  String?
  isVerified      Boolean   @default(false)
  student         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Achievement {
  id              String  @id @default(uuid())
  title           String
  details         String?
  certificateUrl  String
  achievementTime String?
  userId          Int
  student         User?   @relation(fields: [userId], references: [id])
}

model Admin {
  id        Int      @id @default(autoincrement())
  fullName  String
  contactNo String
  emailId   String   @unique
  password  String
  createdAt DateTime @default(now())
  role      Role

  @@index([emailId])
}

enum Role {
  STUDENT
  ALUMNI
  FACULTY
  AMBASSADOR
  SUPERADMIN
  HOD
  PROFESSOR
}

model Alumni {
  id              Int            @id @default(autoincrement())
  userId          Int            @unique
  placedBy        String
  pastOrg         Pastorg[]
  currentOrg      String
  package         String
  student         User           @relation(fields: [userId], references: [id])
  isHigherStudies HigherStudies?
}

model Pastorg {
  id          Int       @id @default(autoincrement())
  companyName String
  joiningDate DateTime
  leavingDate DateTime?
  role        String
  alumni      Alumni    @relation(fields: [alumniId], references: [id])
  alumniId    Int
}

model HigherStudies {
  id          Int       @id @default(autoincrement())
  collegeName String
  joiningDate DateTime
  leavingDate DateTime?
  location    String
  branch      String
  alumniId    Int       @unique
  alumni      Alumni    @relation(fields: [alumniId], references: [id], onDelete: Cascade)
}
